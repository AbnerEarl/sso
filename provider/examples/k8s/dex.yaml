---
apiVersion: v1
kind: Namespace
metadata:
  name: provider
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: provider
  name: provider
  namespace: provider
spec:
  replicas: 3
  selector:
    matchLabels:
      app: provider
  template:
    metadata:
      labels:
        app: provider
    spec:
      serviceAccountName: provider # This is created below
      containers:
      - image: ghcr.io/provideridp/provider:v2.32.0
        name: provider
        command: ["/usr/local/bin/provider", "serve", "/etc/provider/cfg/config.yaml"]

        ports:
        - name: https
          containerPort: 5556

        volumeMounts:
        - name: config
          mountPath: /etc/provider/cfg
        - name: tls
          mountPath: /etc/provider/tls

        env:
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: github-client
              key: client-id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: github-client
              key: client-secret

        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS
      volumes:
      - name: config
        configMap:
          name: provider
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: provider.example.com.tls
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: provider
  namespace: provider
data:
  config.yaml: |
    issuer: https://provider.example.com:32000
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/provider/tls/tls.crt
      tlsKey: /etc/provider/tls/tls.key
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://provider.example.com:32000/callback
        org: kubernetes
    oauth2:
      skipApprovalScreen: true

    staticClients:
    - id: example-app
      redirectURIs:
      - 'http://127.0.0.1:5555/callback'
      name: 'Example App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0

    enablePasswordDB: true
    staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
---
apiVersion: v1
kind: Service
metadata:
  name: provider
  namespace: provider
spec:
  type: NodePort
  ports:
  - name: provider
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000
  selector:
    app: provider
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: provider
  name: provider
  namespace: provider
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: provider
rules:
- apiGroups: ["provider.coreos.com"] # API group created by provider
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, provider must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: provider
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: provider
subjects:
- kind: ServiceAccount
  name: provider           # Service account assigned to the provider pod, created above
  namespace: provider  # The namespace provider is running in
